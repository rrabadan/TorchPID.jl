var documenterSearchIndex = {"docs":
[{"location":"torch/#TORCH-Detector","page":"TORCH Detector","title":"TORCH Detector","text":"","category":"section"},{"location":"torch/#Introduction","page":"TORCH Detector","title":"Introduction","text":"","category":"section"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"The Time Of internally Reflected CHerenkov (TORCH) detector is a proposed large-area Time-Of-Flight (TOF) detector, which aims to enhance the PID performance of the LHCb detector in the 2‚Äì15 GeV/c momentum range [2]. TORCH exploits the difference in TOF between several species of particles with the same momentum.","category":"page"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"Prompt Cherenkov photons are radiated when charged hadrons traverse a 10 mm-thick quartz plate. The Cherenkov photons are propagated, via total internal reflection, to the periphery of the radiator, where a cylindrical mirrored surface focuses them onto an array of fast-timing photon detectors. The cylindrical mirror is designed such that the position (height) in the MCP can be mapped to the entry angle of the photon in the focusing block, while in the direction, the photon is just reflected.","category":"page"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"(Image: TORCH detector side view)","category":"page"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"Fig. 1: Side view of TORCH with the possible path of a Cherenkov photon emitted by a charged hadron. The diagram shows how Cherenkov light is internally reflected through the quartz plate before being focused onto the photon detectors by the cylindrical mirror.","category":"page"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"The full detector will comprise 18 optically isolated modules, each with a quartz radiator of 2.5 m height, 66 cm width and 1 cm depth, and a focusing block. The 18 radiator bars will cover an area of 5 √ó 6 m¬≤. TORCH will be installed in front of RICH2 of LHCb, at approx. 9.5 m from the interaction point.","category":"page"},{"location":"torch/#Reconstruction","page":"TORCH Detector","title":"Reconstruction","text":"","category":"section"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"The TORCH reconstruction process relies on photon detectors that measure both arrival time (ùë°_textarrival) and position of Cherenkov photons. From these measurements, the azimuthal (phi_C) and polar (theta_C) Cherenkov angles and the photon path length in the radiator can be calculated.","category":"page"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"The photon arrival time can be expressed as:","category":"page"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"t_textarrival = t_0 + t_textTOF + t_textprop  tag1","category":"page"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"where t_0 is the production time of the charged hadron, t_textTOF is the time of flight of the hadron before emitting the Cherenkov photon, and t_textprop is the propagation time of the photon to the detector.","category":"page"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"The TOF can be determined using information from the tracking system as ùëë_texttrack(beta ùëê), where ùëë_texttrack is the particle's path length and beta is calculated based on the particle mass hypothesis (pi, K or p). The production time t_0 can be derived either from TORCH information alone by combining likelihoods of tracks from the same vertex, or from the VELO detector's fast timing capabilities in LHCb Upgrade II.","category":"page"},{"location":"torch/","page":"TORCH Detector","title":"TORCH Detector","text":"The photon propagation time is calculated as ùë°_textprop = ùëë_textpropùë£_textgroup, where ùë£_textgroup is the group velocity dependent on photon energy. Due to the wavelength dependence of the quartz refractive index, chromatic dispersion occurs - photons with different energies from the same track are emitted at different Cherenkov angles. This effect can be corrected using the measured Cherenkov angle.","category":"page"},{"location":"components/photonspectra/#Cherenkov-Radiation-Spectra","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"","category":"section"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"TorchPID.jl provides tools to model the Cherenkov radiation photon spectra within the TORCH detector.","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"These tools facilitate the generation and sampling of photon energy distributions, incorporating detection efficiency and refractive index variations caused by charged particles traversing the TORCH radiator.","category":"page"},{"location":"components/photonspectra/#Key-components","page":"Cherenkov Radiation Spectra","title":"Key components","text":"","category":"section"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"PhotonSpectrum\nDetectorHitTester\nTorchFunctions","category":"page"},{"location":"components/photonspectra/#Creating-a-Discretized-Energy-Spectrum","page":"Cherenkov Radiation Spectra","title":"Creating a Discretized Energy Spectrum","text":"","category":"section"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"To model the Cherenkov photon energy spectrum, the PhotonSpectrum struct provides a discretized representation of photon energies. This includes detector efficiency values and refractive indices for each energy point. Below is an example of how to create and configure a PhotonSpectrum:","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"spectrum = PhotonSpectrum(;\n    nbins = 525,  # Number of energy points\n    emin = 1.75,  # Minimum photon energy (eV)\n    emax = 7.00,  # Maximum photon energy (eV)\n)","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"This discretized spectrum forms the foundation for further calculations, such as photon yield estimation, energy sampling, and threshold detection.","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"Generate the photon energy emission probability distribution for a particle (characterized by beta = 099)","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"beta = 0.99\ndistribution = PhotonSpectrumDistribution(\n    spectrum\n    beta\n)","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"Sample a random energy value from the photon spectrum distribution","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"photon_energy = spectrum_random_energy(\n    spectrum,\n    distribution\n)","category":"page"},{"location":"components/photonspectra/#Photon-Detection-Efficiency","page":"Cherenkov Radiation Spectra","title":"Photon Detection Efficiency","text":"","category":"section"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"Photon emission probabilities are calculated accounting for detection efficiency for a given photon energy. This considers quantum detector efficiency, collection efficiency, and mirror reflectivity. DetectorHitTester encapsulates the configuration for photon detection efficiency.","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"dht = DetectorHitTester(\n    emin::Float64 = 1.75,\n    emax::Float64 = 7.00,\n    implement_epotek_cutoff::Bool = true,\n    implement_imperfect_mirror::Bool = true,\n    implement_QE::Bool = true,\n    implement_CE::Bool = true,\n)","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"It can be used to construct a custom PhotonSpectrum","category":"page"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"spectrum = PhotonSpectrum(\n    dht;\n    nbins = 525,  # Number of energy points\n    emin = 1.75,  # Minimum photon energy (eV)\n    emax = 7.00,  # Maximum photon energy (eV)\n)\n\nbeta = 0.99\ndistribution = PhotonSpectrumDistribution(\n    spectrum\n    beta\n)\n\nphoton_energy = spectrum_random_energy(\n    spectrum,\n    distribution\n)","category":"page"},{"location":"components/photonspectra/#TorchFunctions","page":"Cherenkov Radiation Spectra","title":"TorchFunctions","text":"","category":"section"},{"location":"components/photonspectra/","page":"Cherenkov Radiation Spectra","title":"Cherenkov Radiation Spectra","text":"Collection of functions to derive refraction indices derived from the radiatior's material properties. It uncludes functionality to compute quatum efficiency and transmissions probabilities as function of the cherenkov photon's energy. ","category":"page"},{"location":"api/pattern_matcher/#Pattern-Matcher-API","page":"Pattern Matcher","title":"Pattern Matcher API","text":"","category":"section"},{"location":"api/pattern_matcher/","page":"Pattern Matcher","title":"Pattern Matcher","text":"CurrentModule = TorchPID\nDocTestSetup = quote\n    using TorchPID\nend","category":"page"},{"location":"api/pattern_matcher/","page":"Pattern Matcher","title":"Pattern Matcher","text":"Pattern matching algorithms and models used in TorchPID for particle identification.","category":"page"},{"location":"api/pattern_matcher/#Public-API","page":"Pattern Matcher","title":"Public API","text":"","category":"section"},{"location":"api/pattern_matcher/","page":"Pattern Matcher","title":"Pattern Matcher","text":"Modules = [TorchPID]\nOrder = [:type, :function]\nPublic = true\nPrivate = false\nPages   = [\"PatternMatcher.jl\"]","category":"page"},{"location":"api/pattern_matcher/#TorchPID.project_pattern-Tuple{Particle, Float64, PhotonMapper, PhotonSpectrum, PhotonSpectrumDistribution, PhotonFactory}","page":"Pattern Matcher","title":"TorchPID.project_pattern","text":"project_pattern(particle, beta, mapper, spectrum, distribution)\nproject_pattern(particle, beta, mapper, spectrum)\n\nproject_pattern calculates the hit coordinate pattern for a particle defined by its velocity factor (beta) and trajectory.      It generates photons with energies sampled from the PhotonSpectrum and PhotonSpectrumDistribution,      then traces each photon to the detector plane using the specified PhotonMapper.      A convenience method is available to construct the photon distribution internally,      delegating the computation to the primary project_pattern function.\n\nArguments\n\nparticle::Particle: Particle struct representing the particle's trajectory and timing.\nbeta::Float64: The particle's velocity factor relative to the speed of light.\nmapper::PhotonMapper: Used to map photon properties to detector hit coordinates.\nspectrum::PhotonSpectrum: Energy spectrum of photons.\ndistribution::PhotonSpectrumDistribution: Details of the photon distribution.\n\nReturns\n\nVector{HitCoordinate}: A vector of hit coordinates compatible with the provided spectrum and particle parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/pattern_matcher/#Implementation-Details","page":"Pattern Matcher","title":"Implementation Details","text":"","category":"section"},{"location":"api/pattern_matcher/","page":"Pattern Matcher","title":"Pattern Matcher","text":"Modules = [TorchPID]\nOrder = [:type, :function]\nPublic = false\nPrivate = true\nPages   = [\"PatternMatcher.jl\"]","category":"page"},{"location":"api/pattern_matcher/#TorchPID._get_time_offset-Tuple{Particle, Float64, Float64, Float64}","page":"Pattern Matcher","title":"TorchPID._get_time_offset","text":"_get_time_offset(particle, beta, depth, time)\n\n_get_time_offset computes the time offset for a particle based on its velocity and traveled distance.      The calculation incorporates the particle's path length and its depth within the detector.      A simplified method is also available, which uses the particle's predefined t0 value as the initial time.\n\nArguments\n\nparticle::Particle: Particle struct containing path length, initial time (t0) and z directional component.\nbeta::Float64: The particle's velocity factor relative to the speed of light.\ndepth::Float64: The measured depth in the detector in millimeters (mm).\ntime::Float64: The initial time offset for the particle.\n\nReturns\n\nFloat64: The computed time offset adjusted by the particle's path length and depth.\n\n\n\n\n\n","category":"method"},{"location":"guide/installation/#Installation-Guide","page":"Installation Guide","title":"Installation Guide","text":"","category":"section"},{"location":"guide/installation/#Package-Installation","page":"Installation Guide","title":"Package Installation","text":"","category":"section"},{"location":"guide/installation/","page":"Installation Guide","title":"Installation Guide","text":"TorchPID.jl can be installed using Julia's package manager:","category":"page"},{"location":"guide/installation/","page":"Installation Guide","title":"Installation Guide","text":"using Pkg\nPkg.add(\"TorchPID\")","category":"page"},{"location":"guide/installation/#Development-Installation","page":"Installation Guide","title":"Development Installation","text":"","category":"section"},{"location":"guide/installation/","page":"Installation Guide","title":"Installation Guide","text":"If you want to contribute to the package or use the latest development version, you can install directly from the GitHub repository:","category":"page"},{"location":"guide/installation/","page":"Installation Guide","title":"Installation Guide","text":"using Pkg\nPkg.develop(url=\"https://github.com/username/TorchPID.jl.git\")","category":"page"},{"location":"guide/installation/#Requirements","page":"Installation Guide","title":"Requirements","text":"","category":"section"},{"location":"guide/installation/","page":"Installation Guide","title":"Installation Guide","text":"TorchPID.jl requires:","category":"page"},{"location":"guide/installation/","page":"Installation Guide","title":"Installation Guide","text":"Julia 1.6 or newer\nAdditional dependencies will be automatically installed by the package manager","category":"page"},{"location":"guide/installation/#Verifying-Installation","page":"Installation Guide","title":"Verifying Installation","text":"","category":"section"},{"location":"guide/installation/","page":"Installation Guide","title":"Installation Guide","text":"To verify that TorchPID.jl is correctly installed, run:","category":"page"},{"location":"guide/installation/","page":"Installation Guide","title":"Installation Guide","text":"using TorchPID\nTorchPID.greet()  # Should display a welcome message","category":"page"},{"location":"guide/#TorchPID-User-Guide","page":"Guide","title":"TorchPID User Guide","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"This guide provides comprehensive information to help you get started with TorchPID.jl.","category":"page"},{"location":"guide/#Quick-Navigation","page":"Guide","title":"Quick Navigation","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"Installation - Instructions for installing the package","category":"page"},{"location":"guide/#Components","page":"Guide","title":"Components","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"TorchPID.jl is organized in components providing the following functionality:","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Cherenkov Radiation Spectra in the TORCH Detector\nReconstructing photon paths\nApplying particle identification algorithms\nReading LHCb TORCH input data\nVisualizing and analyzing results","category":"page"},{"location":"guide/#Simulate","page":"Guide","title":"Simulate","text":"","category":"section"},{"location":"guide/#More-examples","page":"Guide","title":"More examples","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"For detailed examples of how to use TorchPID.jl in specific scenarios, see our Tutorials.","category":"page"},{"location":"api/photon/#Photon-API","page":"Photon","title":"Photon API","text":"","category":"section"},{"location":"api/photon/","page":"Photon","title":"Photon","text":"CurrentModule = TorchPID\nDocTestSetup = quote\n    using TorchPID","category":"page"},{"location":"api/photon/","page":"Photon","title":"Photon","text":"Core definitions and utilities for photon properties and behavior.","category":"page"},{"location":"api/photon/#Public-API","page":"Photon","title":"Public API","text":"","category":"section"},{"location":"api/photon/","page":"Photon","title":"Photon","text":"Modules = [TorchPID]\nOrder = [:type, :function]\nPublic = true\nPrivate = false\nPages   = [\"Photon.jl\"]","category":"page"},{"location":"api/photon/#TorchPID.Photon","page":"Photon","title":"TorchPID.Photon","text":"Photon(energy, xdir, ydir, zdir, xpos, ypos, zpos, slope,\n       np, ng, lambda, emissionTime, is_x_reflected,\n       is_y_reflected, is_z_reflected)\n\nType representing a photon emitted by TORCH's radiator and propagated to the detector. Position coordinates are in millimeters (mm).\n\nFields\n\nenergy::Float64: Photon energy.\nxdir::Float64: X-component of the photon direction in the lab frame.\nydir::Float64: Y-component of the photon direction in the lab frame.\nzdir::Float64: Z-component of the photon direction in the lab frame.\nxpos::Float64: X-coordinate of the emission point.\nypos::Float64: Y-coordinate of the emission point.\nzpos::Float64: Z-coordinate of the emission point.\nslope::Float64: Slope of the trajectory.\nnp::Float64: Phase refractive index.\nng::Float64: Group refractive index.\nlambda::Float64: Wavelength computed as LAMBDA/energy.\nemissionTime::Float64: Time at emission.\nis_x_reflected::Bool: Flag indicating reflection status in x-direction.\nis_y_reflected::Bool: Flag indicating reflection status in y-direction.\nis_z_reflected::Bool: Flag indicating reflection status in z-direction.\n\n\n\n\n\n","category":"type"},{"location":"api/photon/#TorchPID.PhotonFactory","page":"Photon","title":"TorchPID.PhotonFactory","text":"PhotonFactory(radiator, nair, lambda)\n\nType representing a factory for creating photons with common properties.\n\nFields\n\nradiator::Radiator: The radiator material properties and dimensions.\nnair::Float64: The refractive index of air.\nlambda::Float64: Reference wavelength for calculations.\n\n\n\n\n\n","category":"type"},{"location":"api/photon/#TorchPID.create_explicit_photon-Tuple{PhotonFactory, Particle, Vararg{Float64, 5}}","page":"Photon","title":"TorchPID.create_explicit_photon","text":"create_explicit_photon(factory, particle, beta, phic, energy, nphase, ngroup)\n\nCreates a Photon instance with a specific azimuthal angle instead of random sampling. The Cherenkov angle is calculated from beta and the phase refractive index. The emission point is determined at the default location in the radiator.\n\nArguments\n\nfactory::PhotonFactory: The factory containing radiator and refractive index properties.\nparticle::Particle: The particle instance emitting the photon.\nbeta::Float64: The velocity factor of the particle (v/c).\nphic::Float64: The specified azimuthal angle for the photon emission.\nenergy::Float64: The photon energy in appropriate units.\nnphase::Float64: The phase refractive index for the specific photon energy.\nngroup::Float64: The group refractive index for the specific photon energy.\n\nReturns\n\nPhoton: A new Photon object populated with calculated properties.\n\n\n\n\n\n","category":"method"},{"location":"api/photon/#TorchPID.create_explicit_photon-Tuple{PhotonFactory, Particle, Vararg{Float64, 8}}","page":"Photon","title":"TorchPID.create_explicit_photon","text":"create_explicit_photon(factory, particle, thetac, phic, energy, nphase, ngroup, xemission, yemission, zemission)\n\nCreates a Photon instance with precisely specified Cherenkov angle, azimuthal angle, and emission point coordinates. This function provides maximum control over the photon properties for simulation purposes.\n\nArguments\n\nfactory::PhotonFactory: The factory containing radiator and refractive index properties.\nparticle::Particle: The particle instance emitting the photon.\nthetac::Float64: The specified Cherenkov angle for the photon emission.\nphic::Float64: The specified azimuthal angle for the photon emission.\nenergy::Float64: The photon energy in appropriate units.\nnphase::Float64: The phase refractive index for the specific photon energy.\nngroup::Float64: The group refractive index for the specific photon energy.\nxemission::Float64: The x-coordinate of the emission point.\nyemission::Float64: The y-coordinate of the emission point.\nzemission::Float64: The z-coordinate of the emission point (depth in radiator).\n\nReturns\n\nPhoton: A new Photon object populated with calculated properties.\n\n\n\n\n\n","category":"method"},{"location":"api/photon/#TorchPID.create_random_photon-Tuple{PhotonFactory, Particle, Vararg{Float64, 4}}","page":"Photon","title":"TorchPID.create_random_photon","text":"create_random_photon(factory, particle, beta, nphase, ngroup, energy)\n\nCreates a Photon instance by determining its direction, emission point, and reflection flags based on the particle's properties, photon energy, and refractive indices.  The Cherenkov angle is calculated using the particle's velocity and the phase refractive index.  A random azimuthal angle (phi) is uniformly sampled between 0 and 2œÄ to simulate isotropic emission.  The emission point is randomly chosen along the radiator depth to reflect realistic photon production.  Reflection flags are set by comparing the photon's direction with the critical angle for total internal reflection.  Surface roughness effects are excluded from this constructor and are handled separately.\n\nArguments\n\nfactory::PhotonFactory: The factory containing radiator and refractive index properties.\nparticle::Particle: The particle instance emitting the photon.\nbeta::Float64: The velocity factor of the particle (v/c).\nnphase::Float64: The phase refractive index for the specific photon energy.\nngroup::Float64: The group refractive index for the specific photon energy.\nenergy::Float64: The photon energy in appropriate units.\n\nReturns\n\nPhoton: A new Photon object populated with calculated properties.\n\n\n\n\n\n","category":"method"},{"location":"api/photon/#TorchPID.in_focus_acceptance-Tuple{Photon}","page":"Photon","title":"TorchPID.in_focus_acceptance","text":"in_focus_acceptance(photon::Photon)::Bool\n\nin_focus_acceptance checks whether the photon is within the focus acceptance region.      Acceptance is based on the slope of the photon trajectory.      Checks against minimum and maximum slope angles defined in FOCUS constants.\n\nArguments\n\nphoton::Photon: The photon instance.\n\nReturns\n\nBool: Whether the photon is within the acceptance region (true) or not (false).\n\n\n\n\n\n","category":"method"},{"location":"api/photon/#TorchPID.test_z_surface_roughness-Tuple{Photon, Float64, Int64}","page":"Photon","title":"TorchPID.test_z_surface_roughness","text":"test_z_surface_roughness(photon::Photon, roughness::Float64, nreflec::Int)::Bool\n\nTests the photon surface roughness in the z-direction.  Surface roughness is modeled as a Gaussian effect dependent on wavelength. The probability of passing decreases with number of reflections.\n\nArguments\n\nphoton::Photon: The photon instance.\nroughness::Float64: The surface roughness parameter in appropriate units.\nnreflec::Int: The number of reflections.\n\nReturns\n\nBool: Whether the photon passes the surface roughness condition (true) or not (false).\n\n\n\n\n\n","category":"method"},{"location":"api/photon/#Implementation-Details","page":"Photon","title":"Implementation Details","text":"","category":"section"},{"location":"api/photon/","page":"Photon","title":"Photon","text":"The Photon constructor internally uses helper functions for:","category":"page"},{"location":"api/photon/","page":"Photon","title":"Photon","text":"Calculating photon directions (_photon_direction)  \nDetermining emission positions (_photon_emission)","category":"page"},{"location":"api/photon/","page":"Photon","title":"Photon","text":"These internal functions are not part of the public API and may change without notice.","category":"page"},{"location":"api/photon/","page":"Photon","title":"Photon","text":"Modules = [TorchPID]\nOrder = [:type, :function]\nPublic = false\nPrivate = true\nPages   = [\"Photon.jl\"]","category":"page"},{"location":"api/photon/#TorchPID._photon_direction-Tuple{Particle, Float64, Float64, Float64}","page":"Photon","title":"TorchPID._photon_direction","text":"_photon_direction(p::Particle, costhetac::Float64, sinthetac::Float64, phic::Float64)\n\n_photon_direction computes the direction of the photon emitted by the particle in the lab frame.      The photon direction is determined from the Cherenkov angle and azimuthal angle and      rotated to the lab frame using the particle's direction.\n\nArguments\n\np::Particle: The particle instance.\ncosthetac::Float64: Cosine of the Cherenkov angle.\nsinthetac::Float64: Sine of the Cherenkov angle.\nphic::Float64: Azimuthal angle around the particle direction.\n\nReturns\n\nTuple{Float64,Float64,Float64,Float64}: A tuple containing (xdir, ydir, zdir, slope) of the photon direction.\n\n\n\n\n\n","category":"method"},{"location":"api/photon/#TorchPID._photon_emission-Tuple{PhotonFactory, Particle, Float64}","page":"Photon","title":"TorchPID._photon_emission","text":"_photon_emission(p::Particle, zemission::Float64)::Tuple{Float64,Float64,Float64}\n_photon_emission(p::Particle)::Tuple{Float64,Float64,Float64}\n\n_photon_emission calculates the photon emission coordinates at a specified z depth in the radiator.     The emission point is determined by the particle's entry point and direction.     For x and y coordinates, the values are adjusted based on the particle's direction.     A single-argument method uses half the radiator depth as the emission point.\n\nArguments\n\np::Particle: The particle instance.\nzemission::Float64: Optional. Emission depth along the z-axis (mm).   If not provided, defaults to half the radiator depth.\n\nReturns\n\nTuple{Float64,Float64,Float64}: A tuple containing (xpos, ypos, zpos) of the emission point.\n\n\n\n\n\n","category":"method"},{"location":"api/physics_constants/#Physics-Constants","page":"Physics Constants","title":"Physics Constants","text":"","category":"section"},{"location":"api/physics_constants/","page":"Physics Constants","title":"Physics Constants","text":"CurrentModule = TorchPID\nDocTestSetup = quote\n    using TorchPID","category":"page"},{"location":"api/physics_constants/","page":"Physics Constants","title":"Physics Constants","text":"Definitions of commonly used physical constants in the TORCH detector simulations.","category":"page"},{"location":"api/physics_constants/#Public-API","page":"Physics Constants","title":"Public API","text":"","category":"section"},{"location":"api/physics_constants/","page":"Physics Constants","title":"Physics Constants","text":"Modules = [TorchPID]\nPages   = [\"PhysicsConstants.jl\"]","category":"page"},{"location":"api/physics_constants/#TorchPID.CLIGHT","page":"Physics Constants","title":"TorchPID.CLIGHT","text":"Speed of light in vacuum (mm/ns): 299.792458\n\n\n\n\n\n","category":"constant"},{"location":"api/physics_constants/#TorchPID.ELECTRON_MASS","page":"Physics Constants","title":"TorchPID.ELECTRON_MASS","text":"Electron mass (GeV/c^2): 0.000511\n\n\n\n\n\n","category":"constant"},{"location":"api/physics_constants/#TorchPID.KAON_MASS","page":"Physics Constants","title":"TorchPID.KAON_MASS","text":"Kaon mass (GeV/c^2): 0.493677\n\n\n\n\n\n","category":"constant"},{"location":"api/physics_constants/#TorchPID.LAMBDA","page":"Physics Constants","title":"TorchPID.LAMBDA","text":"Energy to wavelength conversion factor (nm * eV): 1239.84193\n\n\n\n\n\n","category":"constant"},{"location":"api/physics_constants/#TorchPID.MUON_MASS","page":"Physics Constants","title":"TorchPID.MUON_MASS","text":"Muon mass (GeV/c^2): 0.105658\n\n\n\n\n\n","category":"constant"},{"location":"api/physics_constants/#TorchPID.N_AIR","page":"Physics Constants","title":"TorchPID.N_AIR","text":"Refractive index of air: 1.00029\n\n\n\n\n\n","category":"constant"},{"location":"api/physics_constants/#TorchPID.PION_MASS","page":"Physics Constants","title":"TorchPID.PION_MASS","text":"Pion mass (GeV/c^2): 0.139570\n\n\n\n\n\n","category":"constant"},{"location":"api/physics_constants/#TorchPID.PROTON_MASS","page":"Physics Constants","title":"TorchPID.PROTON_MASS","text":"Proton mass (GeV/c^2): 0.938272\n\n\n\n\n\n","category":"constant"},{"location":"api/physics_constants/#TorchPID.QQe","page":"Physics Constants","title":"TorchPID.QQe","text":"Elementary charge (C): 1.60217662e-19\n\n\n\n\n\n","category":"constant"},{"location":"api/physics_constants/#TorchPID.ROUGHNESS","page":"Physics Constants","title":"TorchPID.ROUGHNESS","text":"Surface roughness (nm): 0.5\n\n\n\n\n\n","category":"constant"},{"location":"api/hit_models/#Hit-Models-API","page":"Hit Models","title":"Hit Models API","text":"","category":"section"},{"location":"api/hit_models/","page":"Hit Models","title":"Hit Models","text":"Types and methods for modeling hit detection.","category":"page"},{"location":"api/hit_models/","page":"Hit Models","title":"Hit Models","text":"CurrentModule = TorchPID\nDocTestSetup = quote\n    using TorchPID","category":"page"},{"location":"api/hit_models/#Public-API","page":"Hit Models","title":"Public API","text":"","category":"section"},{"location":"api/hit_models/","page":"Hit Models","title":"Hit Models","text":"Modules = [TorchPID]\nPages   = [\"HitModels.jl\"]","category":"page"},{"location":"api/hit_models/#TorchPID.HitCoordinate","page":"Hit Models","title":"TorchPID.HitCoordinate","text":"HitCoordinate(x, y, t; track=0)\n\nType representing a hit coordinate.\n\nFields\n\nx::Float64: The x position of the hit.\ny::Float64: The y position of the hit.\nt::Float64: The time of the hit.\ntrack::Int=0: An optional track identifier for the hit (default value is 0).\n\n\n\n\n\n","category":"type"},{"location":"api/hit_models/#TorchPID.PixelHit","page":"Hit Models","title":"TorchPID.PixelHit","text":"PixelHit(x, y, t; ch=-1)\n\nType representing a pixel hit.\n\nFields\n\nx::Int: The x position of the pixel hit.\ny::Int: The y position of the pixel hit.\nt::Int: The time of the pixel hit.\nch::Int=-1: (Optional) The charge associated with the pixel hit (default value is -1).\n\n\n\n\n\n","category":"type"},{"location":"guide/tutorials/#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"api/photonspectrum/#PhotonSpectrum-API","page":"Photon Spectrum","title":"PhotonSpectrum API","text":"","category":"section"},{"location":"api/photonspectrum/","page":"Photon Spectrum","title":"Photon Spectrum","text":"CurrentModule = TorchPID\nDocTestSetup = quote\n    using TorchPID\nend","category":"page"},{"location":"api/photonspectrum/","page":"Photon Spectrum","title":"Photon Spectrum","text":"Tools to model the Cherenkov radiation photon spectra within the TORCH detector","category":"page"},{"location":"api/photonspectrum/#Public-API","page":"Photon Spectrum","title":"Public API","text":"","category":"section"},{"location":"api/photonspectrum/","page":"Photon Spectrum","title":"Photon Spectrum","text":"Modules = [TorchPID]\nPages   = [\"PhotonSpectrum.jl\"]","category":"page"},{"location":"api/photonspectrum/#TorchPID.PhotonSpectrum","page":"Photon Spectrum","title":"TorchPID.PhotonSpectrum","text":"PhotonSpectrum(nbins, emin, emax, dE, energy, efficiency, nphase, ngroup, vgroup, nphase_edge)\n\nType representing a discretized energy spectrum of Cherenkov photons, including detection efficiency and refractive indices derived from TORCH radiator materials.\n\nFields\n\nnbins::Int: Number of energy bins in the spectrum.\nemin::Float64: Minimum energy value in the spectrum.\nemax::Float64: Maximum energy value in the spectrum.\ndE::Float64: Energy bin width.\nenergy::Vector{Float64}: Array of energy values for each bin.\nefficiency::Vector{Float64}: Array of detection efficiency values corresponding to each energy bin.\nnphase::Vector{Float64}: Array of phase refractive index values for each energy bin.\nngroup::Vector{Float64}: Array of group refractive index values for each energy bin.\nvgroup::Vector{Float64}: Array of group velocities for each energy bin.\nnphase_edge::Vector{Float64}: Array of phase refractive index values at the left edge of each energy bin.\n\nConstructors\n\nPhotonSpectrum(dht::DetectorHitTester; nbins::Int = 525, emin::Float64 = 1.75, emax::Float64 = 7.00)\nPhotonSpectrum(; nbins::Int=525, emin::Float64=1.75, emax::Float64=7.00)\n\nConstructs a Cherenkov photon spectrum over a specified energy range, with properties computed for each energy bin. The refractive indices are derived from TORCH radiator materials, and detection efficiencies are determined using the provided DetectorHitTester object. A default DetectorHitTester is created if not provided.\n\nArguments\n\ndht::DetectorHitTester: Detector hit tester object containing efficiency parameters.\n\nKeywords\n\nnbins::Int=525: Number of energy bins in the spectrum (default: 525).\nemin::Float64=1.75: Minimum energy value in the spectrum (default: 1.75).\nemax::Float64=7.00: Maximum energy value in the spectrum (default: 7.00).\n\nExamples\n\n# Create a PhotonSpectrum with default parameters\nspectrum = PhotonSpectrum()\n\n# Using convenience method is to construct a PhotonSpectrum\n# with a default DetectorHitTester and specified energy parameters.\nspectrum = PhotonSpectrum(nbins=1000, emin=2.0, emax=6.0)\n\n\n\n\n\n","category":"type"},{"location":"api/photonspectrum/#TorchPID.PhotonSpectrumDistribution","page":"Photon Spectrum","title":"TorchPID.PhotonSpectrumDistribution","text":"PhotonSpectrumDistribution(beta, yield_per_mm, distribution, cumulative)\n\nType encapsulating the photon energy emission probability distribution for a charged particle traversing a TORCH radiator.\n\nFields\n\nbeta::Float64: Relativistic beta factor of the particle.\nyield_per_mm::Float64: Expected photon yield per millimeter of radiator.\ndistribution::Vector{Float64}: Probability distribution of photon energies.\ncumulative::Vector{Float64}: Cumulative distribution function for sampling photon energies.\n\nConstructors\n\nPhotonSpectrumDistribution(s::PhotonSpectrum, beta::Float64)\n\nConstructs a distribution from a PhotonSpectrum and the particle's relativistic beta factor. The distribution is calculated using the Cherenkov emission formula, weighted by the detector efficiency. The photon yield is based on a factor of 37.0 photons per eV per mm as the base rate.\n\nArguments\n\ns::PhotonSpectrum: The photon spectrum containing energy bin information.\nbeta::Float64: Relativistic beta factor (v/c) of the particle.\n\nReturns\n\nA new PhotonSpectrumDistribution object with photon energy emission probabilities calculated.\n\nExamples\n\n# Create a spectrum\nspectrum = PhotonSpectrum()\n\n# Create a photon energies probability distribution for a particle with beta = 0.99\ndistribution = PhotonSpectrumDistribution(spectrum, 0.99)\n\n# Check if the distribution will produce photons\nif spectrum_above_threshold(distribution)\n    # Calculate expected yield over 10mm path\n    yield = spectrum_yield(distribution, 10.0)\n    println(\"Expected photon yield: $yield\")\n    \n    # Sample a random energy from the distribution\n    energy = spectrum_random_energy(spectrum, distribution)\nend\n\n\n\n\n\n","category":"type"},{"location":"api/photonspectrum/#TorchPID.spectrum_above_threshold-Tuple{PhotonSpectrumDistribution}","page":"Photon Spectrum","title":"TorchPID.spectrum_above_threshold","text":"spectrum_above_threshold(d::PhotonSpectrumDistribution)\n\nspectrum_above_threshold determines whether the photon spectrum distribution has a non-zero yield per millimeter.      This indicates if the particle's velocity exceeds the Cherenkov threshold, allowing photon production.\n\nArguments\n\nd::PhotonSpectrumDistribution: The photon spectrum distribution to check.\n\nReturns\n\nBool: true if the yield per millimeter is greater than zero, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/photonspectrum/#TorchPID.spectrum_ngroup-Tuple{PhotonSpectrum, Float64}","page":"Photon Spectrum","title":"TorchPID.spectrum_ngroup","text":"spectrum_ngroup(s::PhotonSpectrum, energy::Float64)\n\nspectrum_ngroup returns the group refractive index value corresponding to the given energy in the photon spectrum.\n\nArguments\n\ns::PhotonSpectrum: The photon spectrum object.\nenergy::Float64: The energy value for which to find the group refractive index.\n\nReturns\n\nFloat64: The group refractive index value for the given energy, or 0.0 if energy is outside the spectrum range.\n\n\n\n\n\n","category":"method"},{"location":"api/photonspectrum/#TorchPID.spectrum_nphase-Tuple{PhotonSpectrum, Float64}","page":"Photon Spectrum","title":"TorchPID.spectrum_nphase","text":"spectrum_nphase(s::PhotonSpectrum, energy::Float64)\n\nspectrum_nphase returns the phase refractive index value corresponding to the given energy in the photon spectrum.\n\nArguments\n\ns::PhotonSpectrum: The photon spectrum object.\nenergy::Float64: The energy value for which to find the phase refractive index.\n\nReturns\n\nFloat64: The phase refractive index value for the given energy, or 0.0 if energy is outside the spectrum range.\n\n\n\n\n\n","category":"method"},{"location":"api/photonspectrum/#TorchPID.spectrum_probability-Tuple{PhotonSpectrum, PhotonSpectrumDistribution, Float64}","page":"Photon Spectrum","title":"TorchPID.spectrum_probability","text":"spectrum_probability(s::PhotonSpectrum, d::PhotonSpectrumDistribution, energy::Float64)\n\nspectrum_probability computes the probability density for a given energy based on the photon spectrum distribution.     It identifies the energy bin corresponding to the input energy and retrieves the normalized probability density for that bin.      If the energy is outside the defined spectrum range, the function returns 0.0.\n\nArguments\n\ns::PhotonSpectrum: The photon spectrum object containing energy bin information.\nd::PhotonSpectrumDistribution: The photon spectrum distribution with normalized probabilities.\nenergy::Float64: The energy value for which to calculate the probability.\n\nReturns\n\nFloat64: The probability density at the given energy, normalized by the yield per millimeter, or 0.0 if energy is outside the spectrum range.\n\n\n\n\n\n","category":"method"},{"location":"api/photonspectrum/#TorchPID.spectrum_random_energy-Tuple{PhotonSpectrum, PhotonSpectrumDistribution}","page":"Photon Spectrum","title":"TorchPID.spectrum_random_energy","text":"spectrum_random_energy(s::PhotonSpectrum, d::PhotonSpectrumDistribution)\n\nspectrum_random_energy samples a random energy value from the photon spectrum distribution using the cumulative distribution function.      It performs linear interpolation within energy bins to ensure accurate and weighted sampling based on the distribution.\n\nArguments\n\ns::PhotonSpectrum: The photon spectrum object containing energy bin information.\nd::PhotonSpectrumDistribution: The photon spectrum distribution for sampling.\n\nReturns\n\nFloat64: A randomly sampled energy value from the distribution, or 0.0 if yield is below threshold.\n\n\n\n\n\n","category":"method"},{"location":"api/photonspectrum/#TorchPID.spectrum_yield-Tuple{PhotonSpectrumDistribution, Float64}","page":"Photon Spectrum","title":"TorchPID.spectrum_yield","text":"spectrum_yield(s::PhotonSpectrum, energy::Float64)\n\nspectrum_yield calculates the total expected photon yield over the specified pathlength.\n\nArguments\n\nd::PhotonSpectrumDistribution: The photon spectrum distribution.\npathlength::Float64: Path length in millimeters traversed by the particle.\n\nReturns\n\nFloat64: Expected total number of photons produced over the pathlength.\n\n\n\n\n\n","category":"method"},{"location":"#TorchPID.jl","page":"Home","title":"TorchPID.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for the TorchPID Julia package!","category":"page"},{"location":"","page":"Home","title":"Home","text":"TorchPID is a Julia project for reconstructing particle identification (PID) using simulation data from the LHCb Torch detector.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"torch.md\",\n    \"guide/installation.md\",\n    \"api/api.md\"\n]\nDepth = 2","category":"page"},{"location":"#About-TORCH","page":"Home","title":"About TORCH","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TORCH (Time Of internally Reflected CHerenkov light) is a charged particle identification system that uses Cherenkov radiation and time-of-flight measurements to distinguish between particle types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Learn more about the TORCH Detector technology and principles.","category":"page"},{"location":"#User-Guide","page":"Home","title":"User Guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Get started with TorchPID:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Installation - Set up the package","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For detailed API documentation, see the Library API.","category":"page"},{"location":"api/api/#API-Reference","page":"Overview","title":"API Reference","text":"","category":"section"},{"location":"api/api/","page":"Overview","title":"Overview","text":"Documentation for \"TorchPID.jl\" interface.","category":"page"},{"location":"api/api/#All-components","page":"Overview","title":"All components","text":"","category":"section"},{"location":"api/api/","page":"Overview","title":"Overview","text":"Physics Constants: Definitions of commonly used physical constants in the TORCH detector simulations.\nHit Models: Types and methods for modeling hit detection.\nPhoton: Core definitions and utilities for photon properties and behavior.\nPhoton Mapper: Tools for simulating the photon propagation through TORCH's optical system.\nPhoton Spectrum: Tools to model the Cherenkov radiation photon spectra within the TORCH detector","category":"page"},{"location":"api/photonmapper/#PhotonMapper-API","page":"Photon Mapper","title":"PhotonMapper API","text":"","category":"section"},{"location":"api/photonmapper/","page":"Photon Mapper","title":"Photon Mapper","text":"CurrentModule = TorchPID\nDocTestSetup = quote\n    using TorchPID","category":"page"},{"location":"api/photonmapper/","page":"Photon Mapper","title":"Photon Mapper","text":"Tools for simulating the photon propagation through TORCH's optical system.","category":"page"},{"location":"api/photonmapper/#Public-API","page":"Photon Mapper","title":"Public API","text":"","category":"section"},{"location":"api/photonmapper/","page":"Photon Mapper","title":"Photon Mapper","text":"Modules = [TorchPID]\nOrder = [:type, :function]\nPublic = true\nPrivate = false\nPages   = [\"PhotonMapper.jl\"]","category":"page"},{"location":"api/photonmapper/#TorchPID.PhotonMapper","page":"Photon Mapper","title":"TorchPID.PhotonMapper","text":"PhotonMapper(blackened_sides blackened_bottom,\n             blackened, surface_roughness,\n             max_x_reflections)\n\nType representing the photon mapping configuration for photon propagation.\n\nFields\n\nblackened_sides::Bool: If true, photons reflecting off the radiator's sides are absorbed.\nblackened_bottom::Bool: If true, photons reflecting off the radiator's bottom are ignored.\nblackened_focus::Bool: If true, reflections in the focus region are handled differently.\nsurface_roughness::Bool: If true, surface imperfections of the radiator are considered.\nmax_x_reflections::INt: Specifies the maximum allowable x-direction reflections before the photon is discarded.\n\nConstructors\n\nPhotonMapper(; \n    blackened_sides::Bool=false,\n    blackened_bottom::Bool=false,\n    blackened_focus::Bool=false,\n    surface_roughness::Bool=false,\n    max_x_reflections::Int=10\n)\n\nKeywords\n\nblackened_sides::Bool=false: Enable absorption of side reflections.\nblackened_bottom::Bool=false: Ignore bottom reflections if true.\nblackened_focus::Bool=false: Handle focus region reflections differently.\nsurface_roughness::Bool=false: Account for surface imperfections.\nmax_x_reflections::Int=10: Maximum number of x-direction reflections allowed.\n\nReturns\n\nPhotonMapper: A new PhotonMapper instance with the specified configuration.\n\n\n\n\n\n","category":"type"},{"location":"api/photonmapper/#TorchPID.trace_photon-Tuple{PhotonMapper, Photon, Float64}","page":"Photon Mapper","title":"TorchPID.trace_photon","text":"trace_photon(mapper::PhotonMapper, photon::Photon, t0::Float64)\n\ntrace_photon simulates the photon's journey through the optical system, from emission to detection.  It propagates the photon to the top of the plate, accounting for y-direction and z-direction reflections, surface roughness, and pathlength accumulation. It then traces the photon to the focus block, simulating its interaction with the focusing optics, and finally to the detector plane, where it checks for acceptance criteria. The function returns the detected hit coordinate if the photon is successfully traced, or nothing if any tracing step fails.\n\nArguments\n\nmapper::PhotonMapper: The photon mapping configuration.\nphoton::Photon: The photon to trace.\nt0::Float64: The production time of the photon.\n\nReturns\n\nUnion{HitCoordinate,Nothing}: The detected hit coordinate if the photon is successfully traced, or nothing if any tracing step fails.\n\n\n\n\n\n","category":"method"},{"location":"api/photonmapper/#Implementation-Details","page":"Photon Mapper","title":"Implementation Details","text":"","category":"section"},{"location":"api/photonmapper/","page":"Photon Mapper","title":"Photon Mapper","text":"The trace_photon function internally uses helper functions to propagate the cherenkov emitted photon.","category":"page"},{"location":"api/photonmapper/","page":"Photon Mapper","title":"Photon Mapper","text":"These internal functions are not part of the public API and may change without notice.","category":"page"},{"location":"api/photonmapper/","page":"Photon Mapper","title":"Photon Mapper","text":"Modules = [TorchPID]\nOrder = [:type, :function]\nPublic = false\nPrivate = true\nPages   = [\"PhotonMapper.jl\"]","category":"page"},{"location":"api/photonmapper/#TorchPID._project_x_detector_position-Tuple{PhotonMapper, Photon, Float64}","page":"Photon Mapper","title":"TorchPID._project_x_detector_position","text":"_project_x_detector_position(mapper::PhotonMapper, photon::Photon, pathlength::Float64)\n\n_project_x_detector_position calculates the photon's x-coordinate on the detector plane by projecting its trajectory. It considers x-direction reflections based on the mapper's configuration. Returns nothing if side blackening is enabled and reflection is required, the photon cannot reflect in x, or the maximum allowed reflections is exceeded.\n\nArguments\n\nmapper::PhotonMapper: The mapping configuration.\nphoton::Photon: The photon instance.\npathlength::Float64: Total travelled pathlength.\n\nReturns\n\nUnion{Float64,Nothing}: The projected x position on the detector, or nothing if the photon does not reach the detector due to reflection conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/photonmapper/#TorchPID._trace_to_detector-Tuple{Float64, Float64, Float64}","page":"Photon Mapper","title":"TorchPID._trace_to_detector","text":"_trace_to_detector(yf::Float64, tyf::Float64, tzf::Float64)\n\n_trace_to_detector simulates the photon's propagation from the entrance of the focusing block to the detector plane, accounting for mirror reflections and acceptance criteria.\n\nArguments\n\nyf::Float64: Position at entrance of the focus block\ntyf::Float64: Y-component of photon momentum at entrance of the focus block\ntzf::Float64: Z-component of photon momentum at entrance of the focus block\n\nReturns\n\nUnion{Tuple{Float64,Float64},Nothing}: A tuple containing:\nydetected::Float64: Position of photon on detector plane\npathlength::Float64: Accumulated pathlength\nReturns nothing if the photon's path is terminated.\n\n\n\n\n\n","category":"method"},{"location":"api/photonmapper/#TorchPID._trace_to_focus-Tuple{Float64, Float64, Float64}","page":"Photon Mapper","title":"TorchPID._trace_to_focus","text":"_trace_to_focus(zp::Float64, typ::Float64, tzp::Float64)\n\n_trace_to_focus propagates the photon from the top of the flat section to the entrance of the focus block.\n\nArguments\n\nzp::Float64: Position at top of the plate\ntyp::Float64: Y-component of photon momentum at top of the plate\ntzp::Float64: Z-component of photon momentum at top of the plate\n\nReturns\n\nUnion{Tuple{Float64,Float64,Float64,Float64},Nothing}: A tuple containing:\nyf::Float64: Position in focus block coordinates\ntyf::Float64: Y-component of photon momentum in focus block coordinates\ntzf::Float64: Z-component of photon momentum in focus block coordinates\npathlength::Float64: Accumulated pathlength\nReturns nothing if the photon's path is terminated.\n\n\n\n\n\n","category":"method"},{"location":"api/photonmapper/#TorchPID._trace_to_top_of_plate-Tuple{PhotonMapper, Photon}","page":"Photon Mapper","title":"TorchPID._trace_to_top_of_plate","text":"_trace_to_top_of_plate(mapper::PhotonMapper, photon::Photon)\n\n_trace_to_top_of_plate propagates the photon to the top of the plate, accounting for y-direction and z-direction reflections, surface roughness, and pathlength accumulation.\n\nArguments\n\nmapper::PhotonMapper: The mapping configuration.\nphoton::Photon: The photon to be traced.\n\nReturns\n\nUnion{Tuple{Float64,Float64,Float64,Float64},Nothing}: A tuple containing:\nzp::Float64: Position in z\ntyp::Float64: Y-component of photon momentum\ntzp::Float64: Z-component of photon momentum\npathlength::Float64: Accumulated pathlength\nReturns nothing if the photon's path is terminated.\n\n\n\n\n\n","category":"method"}]
}
